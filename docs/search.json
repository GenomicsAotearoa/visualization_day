[
  {
    "objectID": "viz_4_building_better.html",
    "href": "viz_4_building_better.html",
    "title": "Building Better Plots",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntop_group_counts &lt;- read.csv(\"~/Library/CloudStorage/OneDrive-UniversityofOtago/Documents/Training Coordinator 2022/GitHub/visualization_day/data/eDNA_group_counts.csv\")\nWorking from https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot/ : Could now show the counts (not Count) as a boxplot for each Group.\n# Verify that all groups have 500 observations\ntop_group_counts |&gt; group_by(Group) |&gt; summarize(observations = n(), .groups = \"drop\") |&gt; arrange(desc(observations)) |&gt; head()\n\n# A tibble: 6 × 2\n  Group    observations\n  &lt;chr&gt;           &lt;int&gt;\n1 Birds             500\n2 Ciliates          500\n3 Diatoms           500\n4 Fish              500\n5 Insects           500\n6 Mammals           500\nInitial plot of the data:\nggplot(data = top_group_counts,\nmapping = aes(x = Group, y = Count)) +\ngeom_boxplot()\nTaking the log of Count data makes this clearer:\nggplot(data = top_group_counts,\nmapping = aes(x = Group, y = log(Count))) +\ngeom_boxplot()\nIt’s often worth representing boxplots on a horizontal, rather than vertical, distribution. Let’s switch our axes assignments:\nggplot(data = top_group_counts,\nmapping = aes(x = log(Count), y = Group)) +\ngeom_boxplot()\nGenerally we will find that sometimes switching the layout like this can provide us with clearer visualization, sometimes due to labels, sometimes for aesthetics."
  },
  {
    "objectID": "viz_4_building_better.html#better-visualization",
    "href": "viz_4_building_better.html#better-visualization",
    "title": "Building Better Plots",
    "section": "Better visualization",
    "text": "Better visualization\nWe can now start to focus on the visualization aspects: control plot themes such as labels, titles, spacing. We can explore geoms, and variations on geoms, to determine the best way to present the data. Finally, we can add additional geoms or mappings to display more data.\n\nTheme\nTheme is a separate function that controls almost all visual elements of a ggplot. We can fine tune text elements (font size, shape, angle for axis text, create custom labels and titles), the legend (changing the position, setting a background, control the title and content), the ‘panel’ (panel is the background of the plot, in the above cases we have a grid), and many other features.\nA useful tip for working with ggplot is to save a set of basic features, such as the data, mapping, and theme to an object which can then be used for plotting with different geoms later. Notice below we use a slightly different format for writing our ggplot function - we omit “data =” and “mapping =”, since those calls are always required and used.\nFor simplicity we will also reduce our total dataset down to just\n\ngroupCounts &lt;- ggplot(top_group_counts_sorted, aes(x = log(Count), y = Group, colour = Group)) +\n  labs(title = \"eDNA counts vary across species groups\",\n       x = \"log(Count)\", \n       y = \"Group\") +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 10),\n    panel.grid = element_blank()\n  ) \n\n# Note, no plot is created yet. We will now use the groupCounts object in combination with geom functions to create plots.\n\nWe can now trial different geoms to determine which type suits our visualization needs.\n\ngroupCounts + \n  geom_boxplot() \n\n\n\n\n\n\n\n\n\ngroupCounts + \n  geom_violin() \n\n\n\n\n\n\n\n\n\ngroupCounts + geom_line()\n\n\n\n\n\n\n\n\n\ngroupCounts + geom_point()\n\n\n\n\n\n\n\n\nA particularly useful argument with the geom_point() function is alpha, which controls the opacity/transparency of the points. With reduced opacity we can see more clearly when points are placed on top of one another. It is less clear in this example because there are so many data points in a small space, but it’s usefulness will become more apparent shortly.\n\ngroupCounts + geom_point(size = 3, alpha = 0.2)\n\n\n\n\n\n\n\n\n\n\nCombining geoms\nGeoms can be combined to create more complex plots by layering one set of information over another.\n\ngroupCounts + \n  geom_boxplot(colour = \"gray\", outlier.alpha = 0) +\n  geom_point(size = 3, alpha = 0.2)\n\n\n\n\n\n\n\n\nNote that we’ve included a new argument in geom_boxplot(): “outlier.alpha = 0”. The boxplot geom normally adds points that are considered outliers (greater than 1.5 times the interquartile range above or below the 1st or 3rd quartile). Since these points are going to be represented by the geom_point() function, we need to set outlier.alpha to 0 so that they are functionally invisible (and are therefore not printed twice).\nWhile the above demonstrates the concept of combining geoms, it’s not very functional. The high density of our points on a straight line is creating a strong effect that is over-powering other visualizations. We can change the points from being on a single line to spaced apart with the geom_jitter() function.\n\ngroupCounts + geom_jitter(size = 2, alpha = 0.2, width = 0.2)\n\n\n\n\n\n\n\n\n\ngroupCounts + \n  geom_boxplot(colour = \"gray40\", outlier.alpha = 0) +\n  geom_jitter(size = 2, alpha = 0.2, width = 0.2)\n\n\n\n\n\n\n\n# gray40 is a darker gray that is not quite black. I had to test multiple colours to find one that was clearly visible but not overwhelming.\n\n\n\n(Even) more geoms\nThere are some really cool things we can do by combining geoms, and here your imagination and creativity is (probably) the limiting factor rather than ggplot.\nLet’s look at how each of our Groups compares to the average (and in this case, we will use mean instead of the median we have been using with our box plots).\nFirst, we will visualize the Group means with the stat_summary function.\n\ngroupCounts +\n  geom_jitter(size = 2, alpha = 0.2, width = 0.2) +\n  stat_summary(fun = mean, geom = \"point\", size = 5, colour = \"gray40\")\n\n\n\n\n\n\n\n\nNote: here we have selected the size of the stat_summary point as 5, but we could also provide a set of values (e.g., if we had different numbers of observations per group).\nNext, we can add the overall mean for these groups as a vertical line:\n\n# Calculate the average number of Counts across all samples. \ntop10_group_avg &lt;- top_group_counts_sorted |&gt; \n  summarize(t10_avg = mean(log(Count))) |&gt; \n  pull(t10_avg)\n\ngroupCounts +\n  geom_vline(aes(xintercept = top10_group_avg), colour = \"gray50\", size = 0.6) +\n  stat_summary(colour = \"gray40\",fun = mean, geom = \"point\", size = 5) +\n  geom_jitter(size = 2, alpha = 0.2, width = 0.2)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nGeom order matters! Note how the summary points (black) are obscured by the coloured points produced by geom_jitter()? We can switch the order so that the jitter points are drawn first, and the summary points placed on top.\n\ngroupCounts +\n  geom_jitter(size = 2, alpha = 0.2, width = 0.2) +\n  geom_vline(aes(xintercept = top10_group_avg), colour = \"gray50\", size = 0.6, alpha = 0.8) +\n  stat_summary(colour = \"gray50\",fun = mean, geom = \"point\", size = 5, alpha = 0.75)\n\n\n\n\n\n\n\n\nIf we are trying to highlight the difference between a Group mean and the global mean, this can be amplified by adding text to our image.\n\ngroupMeans &lt;- top_group_counts_sorted |&gt; group_by(Group) |&gt; summarise(groupMean = log(mean(Count))) |&gt; pull(groupMean)\n\ngroupCounts +\n  geom_jitter(size = 2, alpha = 0.2, width = 0.2) +\n  geom_vline(aes(xintercept = top10_group_avg), colour = \"gray50\", size = 0.6, alpha = 0.8) +\n  stat_summary(colour = \"gray60\",fun = mean, geom = \"point\", size = 5, alpha = 0.8) +\n  annotate(\n    \"text\", x = 7.8, y = 10, size = 2.8, color = \"gray20\", lineheight = .9,\n    label = glue::glue(\"Counts for fish are significantly higher\\nthan other groups (7.6)\")\n  ) +\n    annotate(\n    \"text\", x = 5.25, y = 1, size = 2.8, color = \"gray20\",\n    label = \"Total group average (4.2)\"\n  )\n\n\n\n\n\n\n\n\nThis isn’t necessarily something you would do in many types of plots, but is useful to draw attention to key points (often, e.g., a single gene of interest in a scatter plot).\n\nggsave(\"boxplot.png\", height = 10, width = 8)\n\n\noptions(repr.plot.height = 12, repr.plot.width = 6)\ngroupCounts + \n  geom_boxplot() \n\n\n\n\n\n\n\n\n\nCan I add some viz of the total number of samples in each group\ne.g., There are 273,199 plants, 87713 Fish : while more plants were detected, they had lower median count than Fish. In some cases, Group count and Count are correlated, in some cases not."
  },
  {
    "objectID": "blog/second-post/index.html",
    "href": "blog/second-post/index.html",
    "title": "Second Post",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Quis imperdiet massa tincidunt nunc pulvinar sapien et ligula. Amet cursus sit amet dictum sit amet. Eget duis at tellus at urna condimentum. Convallis aenean et tortor at risus viverra. Tincidunt ornare massa eget egestas purus viverra accumsan. Et malesuada fames ac turpis egestas. At imperdiet dui accumsan sit amet. Ut ornare lectus sit amet est placerat. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Duis ultricies lacus sed turpis tincidunt id aliquet risus. Mattis enim ut tellus elementum sagittis. Dui id ornare arcu odio ut. Natoque penatibus et magnis dis. Libero justo laoreet sit amet cursus sit. Sed faucibus turpis in eu. Tempus iaculis urna id volutpat lacus laoreet.\nPhasellus vestibulum lorem sed risus. Eget felis eget nunc lobortis mattis. Sit amet aliquam id diam maecenas ultricies. Egestas maecenas pharetra convallis posuere morbi. Etiam erat velit scelerisque in dictum non consectetur a erat. Cras fermentum odio eu feugiat pretium nibh ipsum consequat. Viverra accumsan in nisl nisi scelerisque. Et netus et malesuada fames ac. Amet tellus cras adipiscing enim eu turpis egestas pretium aenean. Eget lorem dolor sed viverra ipsum nunc aliquet. Ultrices dui sapien eget mi proin sed libero enim sed. Ultricies mi eget mauris pharetra et ultrices neque. Ipsum suspendisse ultrices gravida dictum. A arcu cursus vitae congue mauris rhoncus aenean vel. Gravida arcu ac tortor dignissim convallis. Nulla posuere sollicitudin aliquam ultrices."
  },
  {
    "objectID": "blog/third-post/index.html",
    "href": "blog/third-post/index.html",
    "title": "Third Blog Post",
    "section": "",
    "text": "The source for any page in your website could also be a Jupyter Notebook. This one is third-post/index.ipynb.\nHere’s an example I borrowed from the Seaborn docs:\n\nimport seaborn as sns\n\nsns.set_theme(style=\"whitegrid\")\n\n# Load the diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Plot the distribution of clarity ratings, conditional on carat\nsns.displot(\n    data=diamonds,\n    x=\"carat\", hue=\"cut\",\n    kind=\"kde\", height=4, aspect=1.5,\n    multiple=\"fill\", clip=(0, None),\n    palette=\"ch:rot=-.25,hue=1,light=.75\",   \n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "From Start to Finish: Visualizing Your Data",
    "section": "",
    "text": "Good visualization is about more than just writing the correct code. Visualization is communication, and good communication requires thinking about how we as the scientist/data analyst/creator convey our message to the reader. This one-day workshop will provide you with a toolbox of skills and code examples to help you create clear, visually interesting visualizations which accurately communicate a message.\nThis workshop has four components:\nThe basic code template for ggplot.\nVisualization for our selves (exploratory analysis).\nExamples of good visualization (with code).\nVisualizing your own data."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "From Start to Finish: Visualizing Your Data",
    "section": "Education",
    "text": "Education\nUniversity of XYZ, City | Location | Sept 20XX - June 20XX"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "From Start to Finish: Visualizing Your Data",
    "section": "Experience",
    "text": "Experience\nWorkplace | Job title | April 20XX - present"
  },
  {
    "objectID": "viz_3_exemplarVisualizations.html",
    "href": "viz_3_exemplarVisualizations.html",
    "title": "Exemplar visualizations - what far can we take it?",
    "section": "",
    "text": "We’ve seen how to make ‘quick and dirty’ plots for ourselves. Now we will give you a glimpse of just how far you can take your visualizations. For this section we are looking at both code complexity and fundamental elements of design. The aim is to create visualizations that are clear and concise, which are also able to capture and hold attention.\nHere we will provide guidelines on design and visualization while highlighting key examples from the scientific community. All code will be easily accesible for you to use as templates for your future work.\nAn example"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Predicting House Prices with Machine Learning\n\n\n\nPython\n\n\nMachine Learning\n\n\nData Cleaning\n\n\n\nThis project involves using machine learning algorithms to predict house prices based on various features such as location, size, and amenities. It includes data cleaning, feature engineering, and model selection.\n\n\n\nJan 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomer Segmentation Using Clustering Techniques\n\n\n\nR\n\n\nMachine Learning\n\n\nClustering\n\n\nStatistical Modelling\n\n\n\nThis project focuses on segmenting customers into different groups based on their purchasing behavior and demographics. It uses clustering algorithms like K-means and hierarchical clustering to identify distinct customer segments.\n\n\n\nApr 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing Global CO2 Emissions\n\n\n\nR\n\n\nData Visualization\n\n\nEnvironmental Science\n\n\n\nThis project involves creating visualizations to show trends in global CO2 emissions over time. It includes data extraction from public databases, data cleaning, and using visualization libraries to create interactive charts and graphs.\n\n\n\nJul 1, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "viz_2_exploratoryAnalysis.html",
    "href": "viz_2_exploratoryAnalysis.html",
    "title": "Visualization for ourselves - Exploratory Analysis",
    "section": "",
    "text": "Visualization is most often thought of as something we do for other people, to share some piece of knowledge we have. But equally important is the role visualization can play in us learning something about our data. Visualization can reveal trends or associations that we would otherwise struggle to identify in observations stored in rows and columns.\nIn this section we will perform some quick data transformations and create some simple visualizations. The output of this section does not need to be overly attractive, but it does need to be clear and should ‘standalone’ (i.e., should speak for itself, without the need of accompanying notes).\nExploratory analysis is itself a highly useful skill, but it is also important to get some experience with data transformation - we will only rarely be lucky enough to get data in a format for visualization.\nNote: The aims for this section are to give you the opportunity to practice some of the most important code used in visualizations, and to force you to think about what types of visualizations work well, how to display the information you want to convey."
  },
  {
    "objectID": "blog/first-post/index.html",
    "href": "blog/first-post/index.html",
    "title": "First Post",
    "section": "",
    "text": "Sed risus ultricies tristique nulla aliquet. Neque volutpat ac tincidunt vitae semper quis lectus nulla.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Enim sed faucibus turpis in eu mi bibendum neque. Ac orci phasellus egestas tellus rutrum tellus pellentesque eu. Velit sed ullamcorper morbi tincidunt ornare massa. Sagittis id consectetur purus ut faucibus pulvinar elementum integer. Tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero. Lobortis feugiat vivamus at augue eget arcu. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. Mauris a diam maecenas sed enim ut sem viverra aliquet. Enim ut tellus elementum sagittis vitae et leo duis. Molestie at elementum eu facilisis sed odio morbi quis commodo. Sapien pellentesque habitant morbi tristique senectus. Quam vulputate dignissim suspendisse in est. Nulla pellentesque dignissim enim sit amet venenatis urna cursus eget.\nVelit aliquet sagittis id consectetur purus ut faucibus pulvinar elementum. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue. Tortor at auctor urna nunc id. Sit amet consectetur adipiscing elit duis tristique sollicitudin. Aliquet nibh praesent tristique magna sit amet purus. Tristique senectus et netus et malesuada fames ac turpis. Hac habitasse platea dictumst quisque. Auctor neque vitae tempus quam pellentesque nec nam aliquam. Ultrices tincidunt arcu non sodales neque sodales ut etiam. Iaculis at erat pellentesque adipiscing. Cras tincidunt lobortis feugiat vivamus. Nisi est sit amet facilisis magna etiam. Pharetra pharetra massa massa ultricies mi quis hendrerit. Vitae sapien pellentesque habitant morbi tristique senectus. Ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae."
  },
  {
    "objectID": "viz_1_ggplot.html",
    "href": "viz_1_ggplot.html",
    "title": "Visualization with ggplot2",
    "section": "",
    "text": "In this section we will cover the basic format of ggplot functions. We will note the format and key arguments. This code will be repeated throughout the workshop, and provided frequently as a template: therefore, the goal is not to memorise, but to be able to recognise and interpret while we build in complexity throughout the day."
  },
  {
    "objectID": "viz_1_ggplot.html#the-ggplot-format",
    "href": "viz_1_ggplot.html#the-ggplot-format",
    "title": "Visualization with ggplot2",
    "section": "The ggplot format",
    "text": "The ggplot format\nMany modern R workshops include a section on the Grammer of Graphics, or the ggplot2 function, and there is no shortage of detailed workshops and tutorials available if you want a more thorough grounding of the basics.\nggplot2 is a way to create visualisations within the tidyverse. Once you recognise the template it will become quick and easy to create a variety of plots with different data types with minimal extra work.\nThe format for the ggplot2 template is as follows:\n\nspecify the data\nmap variables e.g., map a column the x axis\ncreate the plot\n\n\n# The code to create a plot, using the template above:\nggplot(data = penData,\n       mapping = aes(x = species,\n                     y = bill_length_mm)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nSome things to note about the format:\n\nIndentations are important. We use new lines and tabs to keep the code organised. Generally you’ll want to specify only one thing per line (e.g., data, x axis and y axis get there own lines).\nThe ggplot formula is a slight break away from the use of pipes.\nThere are actually two separate functions here: the ggplot() function, which is used to specify the data and map the variables, and the geom_boxplot() function which is used to create the actual plot. Because we want these two functions to work together, at the very end of the ggplot() function, we have added a “+” symbol. RStudio interprets this to mean “Ok, the ggplot function has finished, but I need to read it in the context of the next function”.\ngeom_boxplot() is the function for making boxplots. To make a bar plot we would use geom_bar(), to make a scatter plot we use geom_point() etc.,. Type geom_ in the console and scroll the dropdown menu to see the different geom types - there are plenty!"
  },
  {
    "objectID": "viz_1_ggplot.html#extending-the-ggplot-format",
    "href": "viz_1_ggplot.html#extending-the-ggplot-format",
    "title": "Visualization with ggplot2",
    "section": "Extending the ggplot format",
    "text": "Extending the ggplot format\nWe can extend the plot by mapping additional data to variables (e.g., such as species or sex, to variables such as colour and shape), by supplying additional arguments to the geom function (e.g., changing the size, colour or opacity of dots), and add new functions that control features such as the title or axes labels.\nIn all cases, these new arguments and functions follow the template as outlined above. We will continue to use indentations and new lines to keep our code organised and tidy.\nThis example creates a more complex plot, but these new arguments and functions follow the template as outlined above. We continue to use indentations and new lines to keep our code organised and tidy.\n\n# Load the viridis library, which supplies a colour scheme that is sensitive to colour-blindness.\nlibrary(viridis)\n\nLoading required package: viridisLite\n\n# New arguments map species to the colour variable, so that each point is coloured by species.\n# Sex is mapped to shape. Note that shape can only take discrete variables.\nggplot(data = penData,\n       mapping = aes(x = bill_length_mm,\n                     y = flipper_length_mm,\n                     colour = species,\n                     shape = sex)) +\n  geom_point(size = 2, alpha = 0.6) +\n  scale_colour_viridis(discrete = TRUE) +\n  labs(x = \"Bill depth (mm)\",\n       y = \"Flipper length (mm)\") +\n  ggtitle(\"Bill depth vs flipper length\")"
  },
  {
    "objectID": "viz_1_ggplot.html#showcase",
    "href": "viz_1_ggplot.html#showcase",
    "title": "Visualization with ggplot2",
    "section": "Showcase",
    "text": "Showcase\nWhat exactly can we produce with ggplot2?\nhttps://www.cedricscherer.com/top/dataviz/#SciAm\nWhen looking through this gallery, note that while some plots are very complex, they are built from basic elements. Each visualization is carefully designed: colour palettes are interesting but not overwhelming. There is adequate spacing between plot space and titles, axes, and text. Paler text (grey instead of black) makes overall images gentler. Cédric is a master of design as well as code, and all these visualizations demonstrate careful thought and planning."
  }
]
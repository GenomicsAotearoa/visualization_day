---
title: Visualization with ggplot2
toc: true
---

In this section we will cover the basic format of ggplot functions. We will note the format and key arguments. This code will be repeated throughout the workshop, and provided frequently as a template: therefore, the goal is not to memorise, but to be able to recognise and interpret while we build in complexity throughout the day. 

#### Load packages and prep data

Load the palmerpenguins package for an example dataset, ggplot2 for the plotting functions, and dplyr for the pipe (|>).

```{r}
library(palmerpenguins)
# palmerpenguins has loaded a hidden object into your R environment, called penguins, which has data we will use for plotting.
library(ggplot2)
library(dplyr)
```

The penguins object from the palmerpenguins dataset includes NAs. For simplicity we will remove these now, and call our new object penData.

```{r}
penData <- penguins |> na.omit()

penData |> head()
```

## The ggplot format

Many modern R workshops include a section on the Grammer of Graphics, or the ggplot2 function, and there is no shortage of detailed workshops and tutorials available if you want more detailed explanations of the basics. 

ggplot2 is a way to create visualisations within the tidyverse. Once you recognise the template it will become quick and easy to create a variety of plots with different data types with minimal extra work.

The format for the ggplot2 template is as follows:
  
-   Specify the data

-   Map variables *e.g.,* map count data in column a to the x axis

-   Create the plot

```{r}
# The code to create a plot, using the template above:
ggplot(data = penData,
       mapping = aes(x = species,
                     y = bill_length_mm)) +
  geom_boxplot()

# Here we have specified that the data will come from the penData object
# Data from the species variable will be on the x axis
# Data from the bill_length_mm variable will be on the y axis
# The type of plot is a boxplot  
```

Some things to note about the format:
  
  -   Indentations are important. We use new lines and tabs to keep the code organised. Generally you'll want to specify only one thing per line (*e.g.,* data, x axis and y axis get there own lines).

-   The ggplot formula is a slight break away from the use of pipes.

-   There are actually two separate functions here: the ggplot() function, which is used to specify the data and map the variables, and the geom_boxplot() function which is used to create the actual plot. Because we want these two functions to work together, at the very end of the ggplot() function, we have added a "+" symbol. RStudio interprets this to mean "The ggplot function has finished, but it must be interpreted in the context of the next function".

-   geom_boxplot() is the function for making boxplots. To make a bar plot we would use geom_bar(), to make a scatter plot we use geom_point() *etc.,*. Type geom\_ in the console and scroll the dropdown menu to see the different geom types - there are plenty!

## Extending the ggplot format

We can extend the plot in three easy ways: 

1. Mapping additional data to variables (*e.g.,* species or sex to variables such as colour and shape)

2. Supplying additional arguments to the geom function (*e.g.,* changing the size, colour or opacity of dots)

3. Add new functions that control features such as the title or axes labels. 

In all cases, these new arguments and functions follow the template as outlined above. We will continue to use indentations and new lines to keep our code organised and tidy. 

This example creates a more complex plot, but these new arguments and functions follow the template as outlined above. We continue to use indentations and new lines to keep our code organised and tidy. 

```{r}
# Load the viridis library, which supplies a colour scheme that is
# sensitive to colour-blindness.
library(viridis)

# New arguments map species to the colour variable, so that each point is coloured
# by species.
# Sex is mapped to shape. Note that shape can only take discrete variables.
ggplot(data = penData,
       mapping = aes(x = bill_length_mm,
                     y = flipper_length_mm,
                     colour = species,
                     shape = sex)) +
  geom_point(size = 2, alpha = 0.6) + # alpha is transparency of the points
  scale_colour_viridis(discrete = TRUE) +
  labs(x = "Bill depth (mm)",
       y = "Flipper length (mm)") +
  ggtitle("Bill depth vs flipper length") 
```

## Resources and Showcase

What exactly can we produce with ggplot2?

### Galleries, books, workshops

[The r-graph-gallery](https://r-graph-gallery.com/ggplot2-package.html)

The R graph gallery has a section on ggplot and it highlights some of the exciting features: custom fonts, pre-built themes, *interactive* plots - there's a lot going on. 




### From the community 

[Cédric Scherer's Data Visualization Gallery](https://www.cedricscherer.com/top/dataviz/#SciAm)

When looking through this gallery, note that while some plots are very complex, they are built from basic elements. Each visualization is carefully designed: colour palettes are interesting but not overwhelming. There is adequate spacing between plot space and titles, axes, and text. Paler text (grey instead of black) makes overall images gentler. Cédric is a master of design as well as code, and all these visualizations demonstrate careful thought and planning. 


[Isaac Arrayo: towards data science](https://towardsdatascience.com/explaining-my-favourite-tidytuesday-projects-e44bfe988813)

Isaac Arrayo gives us a breakdown of four plots from #tidytuesday (a community effort where people are invited to create visualizations of a provided dataset). We see four diverse plot types, the rationale for each plot, and how these plots might be applied to a more 'standard' dataset (*i.e.,* an in-real-life example).

